name: Deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com

      - name: Build Docker image
        run: |
          docker build --build-arg API_PORT=${{ vars.API_PORT }} \
                       --build-arg DB_HOST=${{ vars.DB_HOST }} \
                       --build-arg DB_USERNAME=${{ secrets.DB_USERNAME }} \
                       --build-arg DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
                       --build-arg DB_DATABASE=${{ vars.DB_DATABASE }} \
                       --build-arg DB_PORT=${{ vars.DB_PORT }} \
                       --build-arg AUTH0_AUDIENCE=${{ secrets.AUTH0_AUDIENCE }} \
                       --build-arg AUTH0_DOMAIN=${{ secrets.AUTH0_DOMAIN }} \
                       -t my-app:latest .

      - name: Tag Docker image
        run: |
          docker tag my-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/todo/todo-server:latest

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/todo/todo-server:latest

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ecs-task-definition.json
          service: kaplan-todo-service
          cluster: kaplan-todo-server
          wait-for-service-stability: true
          substitutions: |
            AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
            AWS_REGION=${{ vars.AWS_REGION }}
            API_PORT=${{ vars.API_PORT }}
            DB_HOST=${{ vars.DB_HOST }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_DATABASE=${{ vars.DB_DATABASE }}
            DB_PORT=${{ vars.DB_PORT }}
            AUTH0_AUDIENCE=${{ secrets.AUTH0_AUDIENCE }}
            AUTH0_DOMAIN=${{ secrets.AUTH0_DOMAIN }}
        env:
          AWS_REGION: eu-north-1
